let $camlTests0__first_const16 = Block 0 () in
let code f_0 (param) my_closure -> k * k1 =
  (let prim = %is_int 0 in
   let Pflambda_isint = %Tag_imm prim in
   let untagged = %untag_imm Pflambda_isint in
   switch untagged
     | 0 -> k3
     | 1 -> k2)
    where k3 =
      let prim = %get_tag 0 in
      let Pgettag = %Tag_imm prim in
      let untagged = %untag_imm Pgettag in
      switch untagged
        | 0 -> k (1)
        | 1 -> k (2)
    where k2 =
      cont k (0)
in
(let f = closure f_0 @f in
 let Pmakeblock = %Block 0 (f) in
 cont k (Pmakeblock))
  where k (module_block) =
    let field_0 = %block_load 0 size 1 (module_block, 0) in
    let $camlTests0 = Block 0 (field_0) in
    cont done ($camlTests0)
===>
let code f_0 deleted : val -> val in
let code f_0_1 newer_version_of(f_0) (param) my_closure -> k * k1 =
  cont k (0)
in
let $camlTests0__f_1 = closure f_0_1 @f in
let $camlTests0 = Block 0 ($camlTests0__f_1) in
cont done ($camlTests0)
